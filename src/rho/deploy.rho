new 
  result, EasyEarnContract, verify, nonceOf,
  initNonce,
  transferNonceMapCh, taskNonceMapCh, recordNonceMapCh, updateNonceMapCh,
  revAddressOps(`rho:rev:address`),
  blake2b256HashOps(`rho:crypto:blake2b256Hash`),
  secp256k1VerifyOps(`rho:crypto:secp256k1Verify`)
in {
  /**
   * 用来验证签名
   *
   * @param address: String, 钱包地址
   * @param nonce: Int, 钱包的序号
   * @param bytes: Array[Byte], 要签名的字节数组
   * @param pk: String, 公钥
   * @param sig: String, 签名
   * @param nonceMapCh: Name, 保存钱包交易序号 Map 的信道
   * @param ack: Name, 返回结果的信道
   *
   * @return (Boolean, String), 验证结果和信息
   */
  contract verify(@address, @nonce, @bytes, @pk, @sig, nonceMapCh, ack) = {
    for(@nonceMap <- nonceMapCh) {
      // 当前请求的交易序号应该是钱包的已完成的交易序号加一
      if(not nonceMap.contains(address)) { ack!((false, "cannot find wallet")) }
      else {
        if(nonce == (nonceMap.get(address) + 1)) {
          new hashOutCh, verifyRetCh, revAddrCh, addressVerifyCh in {
            // 验证钱包地址是否与公钥匹配
            revAddressOps!("fromPublicKey", pk.hexToBytes(), *revAddrCh) |
            for(@retAddress <- revAddrCh) {
              match retAddress {
                String => addressVerifyCh!(retAddress == address)
                _ => addressVerifyCh!(false)
              }
            } |
            
            // 验证签名
            blake2b256HashOps!(bytes, *hashOutCh) |
            for(@hash <- hashOutCh) {
              secp256k1VerifyOps!(hash, sig.hexToBytes(), pk.hexToBytes(), *verifyRetCh)
            } |

            // 返回结果
            for(@r <- verifyRetCh; @addressVerify <- addressVerifyCh) {
              if(r and addressVerify) {
                nonceMapCh!(nonceMap.set(address, nonce)) | ack!((true, "verify success"))
              } else {
                nonceMapCh!(nonceMap) | ack!((false, "verify failed"))
              }
            }
          }
        } else {
          nonceMapCh!(nonceMap) | ack!((false, "nonce not match"))
        }
      }
    }
  } |

  /**
  * 从指定信道中获取指定钱包地址的序号
  *
  * @param address: String, 钱包地址
  * @param nonceMapCh: Name, 保存钱包序号 Map 的信道
  */
  contract nonceOf(@address, nonceMapCh, ack) = {
    for(@nonceMap <- nonceMapCh) {
      if(nonceMap.contains(address)) { ack!((true, nonceMap.get(address))) }
      else { ack!((false, "wallet not found")) }
    }
  } |

  /**
   * 初始化钱包的一些序号
   */
  contract initNonce(@address, @first) = {
    if(first) {
      transferNonceMapCh!({ address: -1 }) |
      taskNonceMapCh!({ address: -1 }) |
      recordNonceMapCh!({ address: -1 }) |
      updateNonceMapCh!({ address: -1 })
    } else {
      for(
        @transferNonceMap <- transferNonceMapCh;
        @taskNonceMap <- taskNonceMapCh;
        @recordNonceMap <- recordNonceMapCh;
        @updateNonceMap <- updateNonceMapCh
      ) {
        transferNonceMapCh!(transferNonceMap.union({ address: -1 })) |
        taskNonceMapCh!(taskNonceMap.union({ address: -1 })) |
        recordNonceMapCh!(recordNonceMap.union({ address: -1 })) |
        updateNonceMapCh!(updateNonceMap.union({ address: -1 }))
      }
    }
  } |

  /**
   * 钱包相关的智能合约
   */
  new verifyTransfer, balanceMapCh in {
    /**
     * 用来查找钱包
     *
     * @param address: String, 钱包地址
     * @param ack: Name, 返回结果的信道
     *
     * @return (Boolean, String), 查找结果和信息
     */
    contract EasyEarnContract(@"find", @address, ack) = {
      for(@balanceMap <<- balanceMapCh) {
        if(balanceMap.contains(address)) { ack!((true, address)) }
        else { ack!((false, "wallet not found")) }
      }
    } |
    /**
     * 用来创建钱包
     *
     * @param pk: String, 公钥
     * @param ack: Name, 返回结果的信道
     *
     * @return (Boolean, String), 创建结果和信息
     */
    contract EasyEarnContract(@"create", @pk, ack) = {
      new revAddrCh in {
        // 通过公钥生成钱包地址
        revAddressOps!("fromPublicKey", pk.hexToBytes(), *revAddrCh) |
        for(@address <- revAddrCh) {
          match address {
            Nil => ack!((false, "invalid public key"))
            String => {
              for(@balanceMap <- balanceMapCh; @transferNonceMap <- transferNonceMapCh; @taskNonceMap <- taskNonceMapCh; @recordNonceMap <- recordNonceMapCh) {
                // 钱包地址和交易序号都不存在时，创建钱包，否则返回错误信息
                if(balanceMap.contains(address) and transferNonceMap.contains(address)) {
                  ack!((false, "wallet already exists"))
                } else {
                  balanceMapCh!(balanceMap.union({ address: 0 })) |
                  initNonce!(address, false) |
                  ack!((true, address))
                }
              }
            }
          }
        }
      }
    } |
    /**
     * 用来查找钱包的交易序号
     *
     * @param address: String, 钱包地址
     * @param ack: Name, 返回结果的信道
     *
     * @return (Boolean, String), 查找结果和信息
     */
    contract EasyEarnContract(@"nonceOf", @address, ack) = {
      nonceOf!(address, *transferNonceMapCh, *ack)
    } |
    /**
     * 用来查找钱包的余额
     *
     * @param address: String, 钱包地址
     * @param ack: Name, 返回结果的信道
     *
     * @return (Boolean, String), 查找结果和信息
     */
    contract EasyEarnContract(@"balanceOf", @address, ack) = {
      for(@balanceMap <<- balanceMapCh) {
        if(balanceMap.contains(address)) { ack!((true, balanceMap.get(address))) }
        else { ack!((false, "wallet not found")) }
      }
    } |
    /**
     * 用来验证转账信息的签名
     *
     * @param from: String, 转账方钱包地址
     * @param to: String, 收款方钱包地址
     * @param nonce: Int, 转账方钱包的交易序号
     * @param amount: Int, 转账金额
     * @param pk: String, 转账方钱包的公钥
     * @param sig: String, 转账方钱包的签名
     * @param ack: Name, 返回结果的信道
     *
     * @return (Boolean, String), 验证结果和信息
     */
    contract verifyTransfer(@from, @to, @nonce, @amount, @pk, @sig, ack) = {
      if(amount <= 0) { ack!((false, "amount must be positive")) }
      else {
        if(from == to) { ack!((false, "cannot transfer between two same address")) }
        else { verify!(from, nonce, [from, to, nonce, amount].toByteArray(), pk, sig, *transferNonceMapCh, *ack) }
      }
    } |
    /**
     * 用来转账
     *
     * @param from: String, 转账方钱包地址
     * @param to: String, 收款方钱包地址
     * @param nonce: Int, 转账方钱包的交易序号
     * @param amount: Int, 转账金额
     * @param pk: String, 转账方钱包的公钥
     * @param sig: String, 转账方钱包的签名
     * @param ack: Name, 返回结果的信道
     *
     * @return (Boolean, String), 转账结果和信息
     */
    contract EasyEarnContract(@"transfer", @from, @to, @nonce, @amount, @pk, @sig, ack) = {
      new retFromCh, retToCh, verifyCh in {
        // 查找转账方和收款方钱包
        EasyEarnContract!("find", from, *retFromCh) |
        EasyEarnContract!("find", to, *retToCh) |
        for(@(successFrom, _) <- retFromCh; @(successTo, _) <- retToCh) {
          // 验证转账方和收款方钱包是否存在
          if((not successFrom) or (not successTo)) { ack!((false, "wallet not found")) }
          else {
            // 验证转账签名
            verifyTransfer!(from, to, nonce, amount, pk, sig, *verifyCh) |
            for(@(success, ret) <- verifyCh) {
              if(success) {
                for(@balanceMap <- balanceMapCh) {
                  // 转账方余额不足时，返回错误信息
                  if(balanceMap.get(from) - amount < 0) {
                    ack!((false, "overdraft")) |
                    balanceMapCh!(balanceMap)
                  } else {
                    balanceMapCh!(balanceMap.set(from, balanceMap.get(from) - amount).set(to, balanceMap.get(to) + amount)) |
                    ack!((true, "transfer success"))
                  }
                }
              } else { ack!((false, ret)) }
            }
          }
        }
      }
    } |
    /**
     * 初始化部署者的钱包，给部署者发钱
     */
    new revAddressCh, deployerId(`rho:rchain:deployerId`) in {
      revAddressOps!("fromDeployerId", *deployerId, *revAddressCh) |
      for(@address <- revAddressCh) {
        balanceMapCh!({ address: 10000000000 }) |
        initNonce!(address, true)
      }
    }
  } |
  /**
   * 哈希值上传与验证的智能合约
   */
  new
    upload, update, getContent,
    taskMapCh, recordMapCh, taskRecordListMapCh
  in {
    /**
    * 获取指定钱包地址的任务序号
    *
    * @param address: String, 钱包地址
    */
    contract EasyEarnContract(@"taskNonceOf", @address, ack) = {
      nonceOf!(address, *taskNonceMapCh, *ack)
    } |

    /**
    * 获取指定钱包地址的提交记录序号, 即读取 recordNonceMap 并查找 address 对应的序号
    *
    * @param address: String, 钱包地址
    */
    contract EasyEarnContract(@"recordNonceOf", @address, ack) = {
      nonceOf!(address, *recordNonceMapCh, *ack)
    } |

    /**
     * 获取指定钱包地址的更新序号
     *
     * @param address: String, 钱包地址
     */
    contract EasyEarnContract(@"updateNonceOf", @address, ack) = {
      nonceOf!(address, *updateNonceMapCh, *ack)
    } |

    /**
    * 从指定信道中获取(address, nonce)对应的版本和哈希值
    *
    * @param address: String, 钱包地址
    * @param nonce: Int, 任务的序号
    * @param mapCh: Name, 保存任务哈希值 Map 的信道
    * @param ack: Name, 返回结果的信道
    *
    * @return (Boolean, String), 查找结果和信息
    */
    contract getContent(@address, @nonce, mapCh, ack) = {
      for(@map <<- mapCh){
        if(map.contains((address, nonce))) { ack!((true, map.get((address, nonce)))) }
        else { ack!((false, "not found"))}
      }
    } |

    /**
    * 获取(address, nonce)对应的任务哈希值和状态
    *
    * @param address: String, 钱包地址
    * @param nonce: Int, 任务的序号
    *
    * @return (Boolean, String), 查找结果和信息
    */
    contract EasyEarnContract(@"taskOf", @address, @nonce, ack) = {
      getContent!(address, nonce, *taskMapCh, *ack)
    } |

    /**
    * 获取(address, nonce)对应的提交记录哈希值
    *
    * @param address: String, 钱包地址
    * @param nonce: Int, 任务的序号
    *
    * @return (Boolean, String), 查找结果和信息
    */
    contract EasyEarnContract(@"recordOf", @address, @nonce, ack) = {
      getContent!(address, nonce, *recordMapCh, *ack)
    } |

    /**
     * 用来上传哈希值
     *
     * @param address: String, 钱包地址
     * @param nonce: Int, 上传信息的信息序号
     * @param hash: String, 上传的哈希值
     * @param bytes: ByteArray, 上传的字节数组
     * @param pk: String, 钱包的公钥
     * @param sig: String, 钱包的签名
     * @param nonceMapCh: Name, 保存钱包序号 Map 的信道
     * @param hashMapCh: Name, 哈希Map信道
     * @param ack: Name, 返回结果的信道
     *
     * @return (Boolean, String), 上传结果和信息
     */
    
    // 客户端打包 address, nonce, hash，并通过私钥进行签名，将签名后的结果是 sig
    // 客户端将 address, nonce, hash, pk, sig 传给服务端，服务端再传给合约
    // 智能合约验证 address 是否和 pk 匹配
    // 智能合约验证 nonce 是否是钱包的已完成的交易序号加一
    // 智能合约验证 address, nonce, hash, pk, sig 的签名是否正确
    // 如果验证通过，将 hash 保存到 hashMap 中
    contract upload(@address, @nonce, @hash, @bytes, @pk, @sig, nonceMapCh, hashMapCh, ack) = {
      new verifyCh in {
        verify!(address, nonce, bytes, pk, sig, *nonceMapCh, *verifyCh) |
        for(@(suc, ret) <- verifyCh) {
          if(not suc) { ack!((false, ret)) }
          else {
            // 保存哈希值
            for(@hashMap <- hashMapCh) {
              hashMapCh!(hashMap.union({ (address, nonce): hash }))
            } |
            ack!((true, "upload success"))
          }
        }
      }
    } |

    /**
     * 用来上传任务哈希值
     *
     * @param address: String, 钱包地址
     * @param nonce: Int, 上传信息的信息序号
     * @param hash: String, 上传的哈希值
     * @param pk: String, 钱包的公钥
     * @param sig: String, 钱包的签名
     * @param ack: Name, 返回结果的信道
     *
     * @return (Boolean, String), 上传结果和信息
     */
    contract EasyEarnContract(@"uploadTask", @address, @nonce, @hash, @pk, @sig, ack) = {
      upload!(address, nonce, hash, [address, nonce, hash].toByteArray(), pk, sig, *taskNonceMapCh, *taskMapCh, *ack)
    } |

    /**
    * 提交任务提交记录
    *
    * @param submitter: String, 提交者钱包地址
    * @param submitNonce: Int, 提交记录的序号
    * @param pulisher: String, 任务发布者钱包地址
    * @param publishNonce: Int, 此任务在任务发布者所有任务中的序号
    * @param hash: String, 提交内容哈希
    * @param pk: String, 公钥
    * @param sig: String, 签名
    */
    contract EasyEarnContract(@"uploadRecord", @submitter, @submitNonce, @publisher, @publishNonce, @hash, @pk, @sig, ack) = {
      new uploadRetCh, findRetCh in {
        // 先检查 (publisher, publichNonce) 这个任务是否存在
        EasyEarnContract!("taskOf", publisher, publishNonce, *findRetCh) |
        for(@(suc, _) <- findRetCh) {
          // 不存在时，返回错误信息
          if(not suc) { ack!((false, "task not found")) }
          else {
            // 存在时，先将提交记录保存到 recordMap 中，再将提交记录的序号保存到 taskRecordListMap 中
            // upload 将提交记录保存到 recordMap 中，同时验证了提交记录的正确性
            upload!(submitter, submitNonce, hash, [submitter, submitNonce, publisher, publishNonce, hash].toByteArray(), pk, sig, *recordNonceMapCh, *recordMapCh, *uploadRetCh) |
            for(@(suc, ret) <- uploadRetCh) {
              // 保存失败时，返回错误信息
              if(not suc) { ack!((false, ret)) }
              // 保存成功时，将提交记录的序号保存到 taskRecordListMap 中
              else {
                for(@taskRecordListMap <- taskRecordListMapCh) {
                  // 判断 taskRecordListMap 中是否存在 (publisher, publishNonce) 这个任务
                  if(taskRecordListMap.contains((publisher, publishNonce))) {
                    // 存在时，将提交记录的序号保存到对应的列表中
                    taskRecordListMapCh!(taskRecordListMap.set(
                      (publisher, publishNonce),
                      taskRecordListMap.get((publisher, publishNonce)) ++ (submitter, submitNonce)
                    ))
                  } else {
                    // 不存在时，创建一个空的提交记录列表
                    taskRecordListMapCh!(taskRecordListMap.union({ (publisher, publishNonce): [(submitter, submitNonce)] }))
                  } |
                  ack!((true, "upload success"))
                }
              }
            }
          }
        }
      }
    } |

    /**
     * 用来更新哈希值
     *
     * @param address: String, 钱包地址
     * @param taskNonce: Int, 任务的序号
     * @param updateNonce: Int, 更新信息的信息序号
     * @param hash: String, 更新的哈希值
     * @param pk: String, 钱包的公钥
     * @param sig: String, 钱包的签名
     * @param ack: Name, 返回结果的信道
     *
     * @return (Boolean, String), 更新结果和信息
     */
    contract EasyEarnContract(@"updateTask", @address, @taskNonce, @updateNonce, @hash, @pk, @sig, ack) = {
      new verifyCh in {
        verify!(address, updateNonce, [address, taskNonce, updateNonce, hash].toByteArray(), pk, sig, *updateNonceMapCh, *verifyCh) |
        for(@(suc, ret) <- verifyCh) {
          if(not suc) { ack!((false, ret)) }
          else {
            for(@taskMap <- taskMapCh) {
              if(taskMap.contains((address, taskNonce))) {
                taskMapCh!(taskMap.union({ (address, taskNonce): hash })) |
                ack!((true, "update success"))
              } else {
                ack!((false, "task not found"))
              }
            }
          }
        }
      }
    }
  } |

  /**
   * 将部署的智能合约注册到 rchain 中
   */
  new ri(`rho:registry:insertArbitrary`) in {
    ri!(bundle+ {*EasyEarnContract}, *result)
  }
}