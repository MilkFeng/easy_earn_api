new 
  result, EasyEarnContract, verify,
  transferNonceMapCh, taskNonceMapCh, recordNonceMapCh,
  revAddressOps(`rho:rev:address`),
  blake2b256HashOps(`rho:crypto:blake2b256Hash`),
  secp256k1VerifyOps(`rho:crypto:secp256k1Verify`)
in {
  /**
   * 用来验证签名
   *
   * @param address: String, 钱包地址
   * @param nonce: Int, 钱包的序号
   * @param bytes: Array[Byte], 要签名的字节数组
   * @param pk: String, 公钥
   * @param sig: String, 签名
   * @param nonceMapCh: Name, 保存钱包交易序号 Map 的信道
   * @param ack: Name, 返回结果的信道
   *
   * @return (Boolean, String), 验证结果和信息
   */
  contract verify(@address, @nonce, @bytes, @pk, @sig, nonceMapCh, ack) = {
    for(@nonceMap <- nonceMapCh) {
      // 当前请求的交易序号应该是钱包的已完成的交易序号加一
      if(not nonceMap.contains(address)) { ack!((false, "cannot find wallet")) }
      else {
        if(nonce == (nonceMap.get(address) + 1)) {
          new hashOutCh, verifyRetCh, revAddrCh, addressVerifyCh in {
            // 验证钱包地址是否与公钥匹配
            revAddressOps!("fromPublicKey", pk.hexToBytes(), *revAddrCh) |
            for(@retAddress <- revAddrCh) {
              match retAddress {
                String => addressVerifyCh!(retAddress == address)
                _ => addressVerifyCh!(false)
              }
            } |
            
            // 验证签名
            blake2b256HashOps!(bytes, *hashOutCh) |
            for(@hash <- hashOutCh) {
              secp256k1VerifyOps!(hash, sig.hexToBytes(), pk.hexToBytes(), *verifyRetCh)
            } |

            // 返回结果
            for(@r <- verifyRetCh; @addressVerify <- addressVerifyCh) {
              if(r and addressVerify) {
                nonceMapCh!(nonceMap.set(address, nonce)) | ack!((true, "verify success"))
              } else {
                nonceMapCh!(nonceMap) | ack!((false, "verify failed"))
              }
            }
          }
        } else {
          nonceMapCh!(nonceMap) | ack!((false, "nonce not match"))
        }
      }
      
    }
  } |
  /**
   * 钱包相关的智能合约
   */
  new verifyTransfer, balanceMapCh in {
    /**
     * 用来查找钱包
     *
     * @param address: String, 钱包地址
     * @param ack: Name, 返回结果的信道
     *
     * @return (Boolean, String), 查找结果和信息
     */
    contract EasyEarnContract(@"find", @address, ack) = {
      for(@balanceMap <<- balanceMapCh) {
        if(balanceMap.contains(address)) { ack!((true, address)) }
        else { ack!((false, "wallet not found")) }
      }
    } |
    /**
     * 用来创建钱包
     *
     * @param pk: String, 公钥
     * @param ack: Name, 返回结果的信道
     *
     * @return (Boolean, String), 创建结果和信息
     */
    contract EasyEarnContract(@"create", @pk, ack) = {
      new revAddrCh in {
        // 通过公钥生成钱包地址
        revAddressOps!("fromPublicKey", pk.hexToBytes(), *revAddrCh) |
        for(@address <- revAddrCh) {
          match address {
            Nil => ack!((false, "invalid public key"))
            String => {
              for(@balanceMap <- balanceMapCh; @transferNonceMap <- transferNonceMapCh; @taskNonceMap <- taskNonceMapCh; @recordNonceMap <- recordNonceMapCh) {
                // 钱包地址和交易序号都不存在时，创建钱包，否则返回错误信息
                if(balanceMap.contains(address) and transferNonceMap.contains(address)) {
                  ack!((false, "wallet already exists"))
                } else {
                  balanceMapCh!(balanceMap.union({ address: 0 })) |
                  transferNonceMapCh!(transferNonceMap.union({ address: -1 })) |
                  taskNonceMapCh!(taskNonceMap.union({ address: -1 })) |
                  recordNonceMapCh!(recordNonceMap.union({ address: -1 })) |
                  ack!((true, address))
                }
              }
            }
          }
        }
      }
    } |
    /**
     * 用来查找钱包的交易序号
     *
     * @param address: String, 钱包地址
     * @param ack: Name, 返回结果的信道
     *
     * @return (Boolean, String), 查找结果和信息
     */
    contract EasyEarnContract(@"nonceOf", @address, ack) = {
      for(@transferNonceMap <<- transferNonceMapCh) {
        if(transferNonceMap.contains(address)) { ack!((true, transferNonceMap.get(address))) }
        else { ack!((false, "wallet not found")) }
      }
    } |
    /**
     * 用来查找钱包的余额
     *
     * @param address: String, 钱包地址
     * @param ack: Name, 返回结果的信道
     *
     * @return (Boolean, String), 查找结果和信息
     */
    contract EasyEarnContract(@"balanceOf", @address, ack) = {
      for(@balanceMap <<- balanceMapCh) {
        if(balanceMap.contains(address)) { ack!((true, balanceMap.get(address))) }
        else { ack!((false, "wallet not found")) }
      }
    } |
    /**
     * 用来验证转账信息的签名
     *
     * @param from: String, 转账方钱包地址
     * @param to: String, 收款方钱包地址
     * @param nonce: Int, 转账方钱包的交易序号
     * @param amount: Int, 转账金额
     * @param pk: String, 转账方钱包的公钥
     * @param sig: String, 转账方钱包的签名
     * @param ack: Name, 返回结果的信道
     *
     * @return (Boolean, String), 验证结果和信息
     */
    contract verifyTransfer(@from, @to, @nonce, @amount, @pk, @sig, ack) = {
      if(amount <= 0) { ack!((false, "amount must be positive")) }
      else {
        if(from == to) { ack!((false, "cannot transfer between two same address")) }
        else { verify!(from, nonce, [from, to, nonce, amount].toByteArray(), pk, sig, *transferNonceMapCh, *ack) }
      }
    } |
    /**
     * 用来转账
     *
     * @param from: String, 转账方钱包地址
     * @param to: String, 收款方钱包地址
     * @param nonce: Int, 转账方钱包的交易序号
     * @param amount: Int, 转账金额
     * @param pk: String, 转账方钱包的公钥
     * @param sig: String, 转账方钱包的签名
     * @param ack: Name, 返回结果的信道
     *
     * @return (Boolean, String), 转账结果和信息
     */
    contract EasyEarnContract(@"transfer", @from, @to, @nonce, @amount, @pk, @sig, ack) = {
      new retFromCh, retToCh, verifyCh in {
        // 查找转账方和收款方钱包
        EasyEarnContract!("find", from, *retFromCh) |
        EasyEarnContract!("find", to, *retToCh) |
        for(@(successFrom, _) <- retFromCh; @(successTo, _) <- retToCh) {
          // 验证转账方和收款方钱包是否存在
          if((not successFrom) or (not successTo)) { ack!((false, "wallet not found")) }
          else {
            // 验证转账签名
            verifyTransfer!(from, to, nonce, amount, pk, sig, *verifyCh) |
            for(@(success, ret) <- verifyCh) {
              if(success) {
                for(@balanceMap <- balanceMapCh) {
                  // 转账方余额不足时，返回错误信息
                  if(balanceMap.get(from) - amount < 0) {
                    ack!((false, "overdraft")) |
                    balanceMapCh!(balanceMap)
                  } else {
                    balanceMapCh!(balanceMap.set(from, balanceMap.get(from) - amount).set(to, balanceMap.get(to) + amount)) |
                    ack!((true, "transfer success"))
                  }
                }
              } else { ack!((false, ret)) }
            }
          }
        }
      }
    } |
    /**
     * 初始化部署者的钱包，给部署者发钱
     */
    new revAddressCh, deployerId(`rho:rchain:deployerId`) in {
      revAddressOps!("fromDeployerId", *deployerId, *revAddressCh) |
      for(@address <- revAddressCh) {
        balanceMapCh!({ address: 10000000000 }) |
        transferNonceMapCh!({ address: -1 }) |
        taskNonceMapCh!({ address: -1 }) |
        recordNonceMapCh!({ address: -1 })
      }
    }
  } |
  /**
   * 哈希值上传与验证的智能合约
   */
  new
    upload, taskMapCh,
    recordHashMapCh, submitNonceCh, recordHashMapCh, submitMapCh, recordMapCh, taskRecordListMapCh
  in {
    /**
     * 用来上传哈希值
     *
     * @param address: String, 钱包地址
     * @param nonce: Int, 上传信息的信息序号
     * @param hash: String, 上传的哈希值
     * @param pk: String, 钱包的公钥
     * @param sig: String, 钱包的签名
     * @param hashMapCh: Name, 哈希Map信道
     * @return (Boolean, String), 上传结果和信息
     */
    
    // 客户端打包 address, nonce, hash，并通过私钥进行签名，将签名后的结果是 sig
    // 客户端将 address, nonce, hash, pk, sig 传给服务端，服务端再传给合约
    // 智能合约验证 address 是否和 pk 匹配
    // 智能合约验证 nonce 是否是钱包的已完成的交易序号加一
    // 智能合约验证 address, nonce, hash, pk, sig 的签名是否正确
    // 如果验证通过，将 hash 保存到 hashMap 中
    contract upload(@address, @nonce, @hash, @pk, @sig, hashMapCh, ack) = {
      new ret, verifyCh in {
        // 查找钱包
        EasyEarnContract!("find", address, *ret) |
        for(@(suc, _) <- ret) {
          if(not suc) { ack!((false, "wallet not found")) }
          else {
            // 验证签名
            verify!(address, nonce, hash, pk, sig, *verifyCh) |
            for(@(suc, ret) <- verifyCh) {
              if(not suc) { ack!((false, ret)) }
              else {
                // 保存哈希值
                for(@hashMap <- hashMapCh) {
                  hashMapCh!(hashMap.union({ (address, nonce): hash }))
                } |
                ack!((true, "upload success"))
              }
            }
          }
        }
      }
    } |

    /**
    *获取指定钱包地址的任务序号
    *
    * @param address: String, 钱包地址
    */
    contract EasyEarnContract(@"taskNonceOf", @address, ack) = {
      new pubRet in {
        //验证签名
        EasyEarnContract!("find", address, *pubRet) |
        for(@(successPub, _) <- pubRet){
          if(not successPub){
            ack!((false, "wallet not found"))
          }else{
            // 读取任务序号
            for(@taskNonceMap <<- taskNonceMapCh){
              if(taskNonceMap.contains(address)) { ack!((true, taskNonceMap.get(address))) }
              else { ack!((false, "nonce not found")) }
            }
          }
        }
      }
    } |
    /**
    *获取指定钱包地址的提交记录序号, 即读取 recordNonceMap 并查找 address 对应的序号
    *
    * @param address: String, 钱包地址
    */
    contract EasyEarnContract(@"recordNonceOf", @address, ack) = {
      new pubRet in {
        //验证签名
        EasyEarnContract!("find", address, *pubRet) |
        for(@(successPub, _) <- pubRet){
          if(not successPub){
            ack!((false, "wallet not found"))
          }else{
            for(@recordNonceMap <<- recordNonceMapCh){
              if(recordNonceMap.contains(address)) { ack!((true, recordNonceMap.get(address))) }
              else { ack!((false, "record nonce not found")) }
            }
          }
        }
      }
    } |
    /**
    *获取(address, nonce)对应的任务哈希值和状态
    *
    * @param address: String, 钱包地址
    * @param nonce: Int, 任务的序号
    */
    contract EasyEarnContract(@"taskOf", @address, @nonce, ack) = {
      new pubRet in {
        //验证签名
        EasyEarnContract!("find", address, *pubRet) |
        for(@(successPub, _) <- pubRet){
          if(not successPub){
            ack!((false, "wallet not found"))
          }else{
            //查询任务信息
            for(@taskMap <<- taskMapCh){
              if(taskMap.contains((address,nonce))) { ack!((true, taskMap.get((address, nonce)))) }
              else { ack!((false, "task not found"))}
            }
          }
        }
      }
    } |
    /**
    *获取(address, nonce)对应的提交记录哈希值
    *
    * @param address: String, 钱包地址
    * @param nonce: Int, 任务的序号
    */
    contract EasyEarnContract(@"recordOf", @address, @nonce, ack) = {
      new verifyCh, pubRet in {
        // 验证签名
        EasyEarnContract!("find", address, *pubRet) |
        for (@(successPub, _) <- pubRet) {
          if (not successPub) {
            ack!((false, "wallet not found"))
          } else {
            // 查询提交记录哈希值
            for (@recordMap <<- recordMapCh) {
              if(recordMap.contains((address,nonce))) { ack!((true, recordMap.get((address, nonce)))) }
              else { ack!((false, "record not found"))}
            }
          }
        }
      }
    } |
    /**
    *上传任务
    *
    * @param address: String, 任务发布者钱包地址
    * @param nonce: Int, 发布任务的序号
    * @param hash: String, 提交内容哈希
    * @param amount: float, 酬金
    * @param pk: String, 公钥
    * @param sig: String, 签名
    */
    contract EasyEarnContract(@"uploadTask", @address, @nonce, @hash, @amount, @pk, @sig, ack) = {
      new verifyCh, pubRet in {
        //验证签名
        EasyEarnContract!("find", address, *pubRet) |
        for(@(successPub, _) <- pubRet){
          if(not successPub){
            ack!((false, "wallet not found"))
          }else{
            verify!(address, nonce, [address, nonce].toByteArray(), pk, sig, *submitNonceCh, *verifyCh) |
            for(@(success, ret) <- verifyCh) {
              if(success) {
                upload!(address, nonce, hash, pk, sig, *submitMapCh, *ack) |
                for(@taskNonceMap <- taskNonceMapCh; @taskMap <- taskMapCh){
                  taskNonceMapCh!(taskNonceMap.set(address, nonce)) |
                  taskMapCh!(taskMap.set((address, nonce),((hash, 0, amount))))
                } 
              } else { ack!((false, ret)) }
            }
          }
        }
      }
    } |
    /**
    *提交任务提交记录
    *
    * @param submitter: String, 提交者钱包地址
    * @param submitNonce: Int, 提交记录的序号
    * @param pulisher: String, 任务发布者钱包地址
    * @param publishNonce: Int, 此任务在任务发布者所有任务中的序号
    * @param hash: String, 提交内容哈希
    * @param pk: String, 公钥
    * @param sig: String, 签名
    */
    contract EasyEarnContract(@"uploadRecord", @submitter, @submitNonce, @publisher, @publishNonce, @hash, @pk, @sig, ack) = {
      new verifyCh, subRet, pubRet, uploadRet in {
        //验证签名
        EasyEarnContract!("find", submitter, *subRet) |
        EasyEarnContract!("find", publisher, *pubRet) |
        for(@(successSub, _) <- subRet; @(successPub, _) <- pubRet){
          if((not successSub) or (not successPub)){
            ack!((false, "wallet not found"))
          }else{
            verify!(submitter, submitNonce, [submitter, submitNonce].toByteArray(), pk, sig, *submitNonceCh, *verifyCh) |
            for(@(success, ret) <- verifyCh) {
              if(success) {
                upload!(submitter, submitNonce, hash, pk, sig, *submitMapCh, *ack) |
                for(@recordNonceMap <- recordNonceMapCh; @recordMap <- recordMapCh; @taskRecordListMap <- taskRecordListMapCh){
                  recordNonceMapCh!(recordNonceMap.set(submitter, submitNonce)) |
                  recordMapCh!(recordMap.set((submitter, submitNonce), hash)) |
                  taskRecordListMapCh!(taskRecordListMap.get((publisher, publishNonce)) ++ (submitter, submitNonce))
                }
              } else { ack!((false, ret)) }
            }
          }
        }
      }  
    } |



    contract EasyEarnContract(@"checkRecord", @address, @nonce, @submitter, @submitNonce, @pk, @sig, ack) = {
      new verifyCh, subRet, pubRet, uploadRet in {
        //验证签名
        EasyEarnContract!("find", submitter, *subRet) |
        for(@(successSub, _) <- subRet; @(successPub, _) <- pubRet){
          if((not successSub) or (not successPub)){
            ack!((false, "wallet not found"))
          }else{
            verify!(submitter, submitNonce, [submitter, submitNonce].toByteArray(), pk, sig, *submitNonceCh, *verifyCh) |
            for(@(success, ret) <- verifyCh) {
              if(success) {
                //upload!(submitter, submitNonce, hash, pk, sig, *submitMapCh, *ack) |
                //EasyEarnContract!("transfer", address, submitter, nonce, @amount, pk, sig, ack) |
                //修改状态 |
              } else { ack!((false, ret)) }
            }
          }
        }
      }  
    }


  } |
  

  /**
   * 将部署的智能合约注册到 rchain 中
   */
  new ri(`rho:registry:insertArbitrary`) in {
    ri!(bundle+ {*EasyEarnContract}, *result)
  }
}