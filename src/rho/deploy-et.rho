new result, EasyTokenVault, balanceMapCh, nonceMapCh, verify, revAddressOps(`rho:rev:address`)in {
    contract EasyTokenVault(@"name", ack) = {
        ack!((true, "Easy Token"))
    } |
    contract EasyTokenVault(@"totalSupply", ack) = {
        ack!((true, 10000000000))
    } |
    contract EasyTokenVault(@"symbol", ack) = {
        ack!((true, "$"))
    } |
    contract EasyTokenVault(@"decimal", ack) = {
        ack!((true, 10))
    } |

    contract EasyTokenVault(@"find", @address, ack) = {
        for(@balanceMap <<- balanceMapCh; @nonceMap <<- nonceMapCh) {
            if(balanceMap.contains(address) and nonceMap.contains(address)) ack!((true, address))
            else ack!((false, "wallet not found"))
        }
    } |
    contract EasyTokenVault(@"create", @pk, ack) = {
        new revAddrCh in {
            revAddressOps!("fromPublicKey", pk.hexToBytes(), *revAddrCh) |
            for(@address <- revAddrCh) {
                match address {
                    Nil => ack!((false, "invalid public key"))
                    String => {
                        for(@balanceMap <- balanceMapCh; @nonceMap <- nonceMapCh) {
                            if(balanceMap.contains(address) and nonceMap.contains(address)) {
                                ack!((false, "wallet already exists"))
                            } else {
                                balanceMapCh!(balanceMap.union({ address: 0 })) |
                                nonceMapCh!(nonceMap.union({ address: -1 })) |
                                ack!((true, address))
                            }
                        }
                    }
                }
            }
        }
    } |
    contract EasyTokenVault(@"getNonce", @address, ack) = {
        for(@nonceMap <<- nonceMapCh) {
            if(nonceMap.contains(address)) ack!((true, nonceMap.get(address)))
            else ack!((false, "wallet not found"))
        }
    } |
    contract EasyTokenVault(@"balanceOf", @address, ack) = {
        for(@balanceMap <<- balanceMapCh) {
            if(balanceMap.contains(address)) ack!((true, balanceMap.get(address)))
            else ack!((false, "wallet not found"))
        }
    } |
    contract verify(@from, @to, @nonce, @amount, @pk, @sig, ack) = {
        for(@nonceMap <- nonceMapCh) {
            if(nonce == (nonceMap.get(from) + 1)) {
                new hashOutCh, verifyRetCh, revAddrCh, addressVerifyCh in {
                    revAddressOps!("fromPublicKey", pk.hexToBytes(), *revAddrCh) |
                    for(@address <- revAddrCh) {
                        match address {
                            Nil => addressVerifyCh!(false)
                            String => addressVerifyCh!(from == address)
                        }
                    } |

                    @"blake2b256Hash"!([nonce, amount, to].toByteArray(), *hashOutCh) |
                    for(@hash <- hashOutCh) {
                        @"secp256k1Verify"!(hash, sig.hexToBytes(), pk, *verifyRetCh)
                    } |


                    for(@r <- verifyRetCh; @addressVerify <- addressVerifyCh) {
                        if(r and addressVerify) {
                            nonceMapCh!(nonceMap.set(from, nonce)) | ack!(true, "verify success")
                        } else {
                            nonceMapCh!(nonceMap) | ack!(false, "verify failed")
                        }
                    }
                }
            } else {
                nonceMapCh!(nonceMap) | ack!(false, "nonce not match")
            }
        }
    } |
    contract EasyTokenVault(@"transfer", @from, @to, @nonce, @amount, @pk, @sig, ack) = {
        new retFromCh, retToCh in {
            EasyTokenVault!("find", from, *retFromCh) |
            EasyTokenVault!("find", to, *retToCh) |
            for(@(successFrom, _) <- retFromCh; @(successTo, _) <- retToCh) {
                if((not successFrom) or (not successTo)) ack!((false, "wallet not found"))
                else {
                    new verifyCh in {
                        verify!(from, to, nonce, amount, pk, sig, *verifyCh) |
                        for(@(success, ret) <- verifyCh) {
                            if(success) {
                                for(@balanceMap <<- balanceMapCh) {
                                    if(balanceMap.get(from) - amount < 0) {
                                        ack!((false, "overdraft"))
                                    } else {
                                        balanceMapCh!(
                                            balanceMap
                                                .set(from, balanceMap.get(from) - amount)
                                                .set(to, balanceMap.get(to) + amount)
                                        ) |
                                        ack!((true, "transfer success"))
                                    }
                                }
                            } else ack!((false, ret))
                        }
                    }
                }
            }
        }
    } |
    new
        revAddressCh,
        deployerId(`rho:rchain:deployerId`),
        stdout(`rho:io:stdout`)
    in {
        revAddressOps!("fromDeployerId", *deployerId, *revAddressCh) |
        for(@address <- revAddressCh) {
            balanceMapCh!({ address: 10000000000 }) |
            nonceMapCh!({ address: -1 })
        }
    } |

    new ri(`rho:registry:insertArbitrary`) in {
        ri!(bundle+ {*EasyTokenVault}, *result)
    }
}